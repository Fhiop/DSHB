require("dotenv").config();
const cheerio = require("cheerio");
const { EmbedBuilder } = require("discord.js");
const axios = require("axios");
const {
  Client,
  Events,
  GatewayIntentBits,
  ApplicationCommandType,
  REST,
  Routes,
  SlashCommandBuilder,
  PermissionFlagsBits,
} = require("discord.js");
const fs = require("fs");
const path = require("path");
const token = process.env.TOKEN;
const API_URL = "https://sqstat.ru/api/server/stat.php?server=C";
const MAX_PLAYERS = 100;

const commands = [
  {
    name: "üöÄ–ü–æ–≤—ã—Å–∏—Ç—å",
    type: ApplicationCommandType.User,
  },
  {
    name: "–ü–æ–Ω–∏–∑–∏—Ç—å",
    type: ApplicationCommandType.User,
  },
  {
    name: "–ó–∞–±–∞–Ω–∏—Ç—å",
    type: ApplicationCommandType.User,
  },
];

const rest = new REST({ version: "10" }).setToken(process.env.TOKEN);

(async () => {
  try {
    console.log("Refreshing application (/) commands...");
    await rest.put(
      Routes.applicationGuildCommands(
        process.env.CLIENT_ID,
        process.env.GUILD_ID
      ),
      { body: commands }
    );
    console.log("Successfully registered application (/) commands.");
  } catch (error) {
    console.error(error);
  }
})();

const PREFIX = "!";
const promotionFilePath = path.join(__dirname, "promotionDates.json");

let promotionDates = {};
if (fs.existsSync(promotionFilePath)) {
  try {
    const fileData = fs.readFileSync(promotionFilePath, "utf-8");
    if (fileData.trim()) {
      promotionDates = JSON.parse(fileData);
    } else {
      console.log("promotionDates.json is empty, starting fresh.");
    }
  } catch (error) {
    console.error("Error reading or parsing promotionDates.json:", error);
  }
} else {
  console.log("promotionDates.json not found, creating a new one.");
}

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const CONFIG = {
  ADMIN_ROLES: ["1233420465499017319", "1204875226110885979"],
  ROLES: {
    –°MD: "1254831503121059900",
    COMMANDER: "1186911102043435100",
    VICE_COMMANDER: "1233029491908149351",
    ELITE: "1186912762018926662",
    RANGER: "1186912800547811389",
    RECRUIT: "1227927464916025444",
    GUEST: "1204881159742423040",
  },
  CHANNELS: {
    BOT_CONTROL_LOG: "1318896486821658624",
    RECRUIT_CHAT: "1283840895208259634",
    ANNOUNCEMENTS: "1298239839556210808",
  },
};

const AUTHORIZED_ROLES = [
  ...CONFIG.ADMIN_ROLES,
  CONFIG.ROLES.CMD,
  CONFIG.ROLES.COMMANDER,
];

function hasRequiredRole(member) {
  return member.roles.cache.some((role) => AUTHORIZED_ROLES.includes(role.id));
}

const roleHierarchy = [
  ...CONFIG.ADMIN_ROLES,
  CONFIG.ROLES.CMD,
  CONFIG.ROLES.COMMANDER,
  CONFIG.ROLES.VICE_COMMANDER,
  CONFIG.ROLES.ELITE,
  CONFIG.ROLES.RANGER,
  CONFIG.ROLES.RECRUIT,
  CONFIG.ROLES.GUEST,
];

async function updateBotStatus() {
  try {
    const response = await axios.get(API_URL);
    const serverData = response.data;
    const queue = serverData.data.queue_players;
    const map = response.data.data.map;

    if (
      serverData.status === "ok" &&
      serverData.data &&
      serverData.data.players
    ) {
      const playerCount = serverData.data.players.length;
      client.user.setPresence({
        activities: [
          {
            name: `RU[AAS] - ${playerCount}/${MAX_PLAYERS} (+${queue}) ${map}`,
            type: 0,
          },
        ],
        status: "online",
      });
    } else {
      console.error("Failed to fetch player data or invalid response.");
    }
  } catch (error) {
    console.error("Error fetching server data:", error);
  }
}

function savePromotionDates() {
  fs.writeFileSync(
    promotionFilePath,
    JSON.stringify(promotionDates, null, 2),
    "utf-8"
  );
}

function getRoleIndex(roleId) {
  return roleHierarchy.indexOf(roleId);
}

function getHighestRole(member) {
  let highestRoleIndex = -1;
  let highestRoleId = null;

  member.roles.cache.forEach((role) => {
    const index = getRoleIndex(role.id);
    if (index !== -1 && (highestRoleIndex === -1 || index < highestRoleIndex)) {
      highestRoleIndex = index;
      highestRoleId = role.id;
    }
  });

  return { roleId: highestRoleId, index: highestRoleIndex };
}

async function sendMessageToChannel(channelId, messageContent) {
  try {
    const channel = await client.channels.fetch(channelId);
    if (!channel) {
      throw new Error("Channel not found");
    }
    await channel.send(messageContent);
    console.log("Message sent successfully!");
  } catch (error) {
    console.error("Failed to send message:", error.message);
  }
}

function getPromotionDate(member) {
  const promotionDateStr = promotionDates[member.id];
  return promotionDateStr ? new Date(promotionDateStr) : null;
}

async function handlePromotion(
  message,
  targetMember,
  authorHighestRole,
  targetHighestRole,
  guild
) {
  try {
    if (!hasRequiredRole(message.member || message)) {
      return message.reply({
        content:
          "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤. –≠—Ç–æ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –ö–ú–î –∏ –∫–æ–º–∞–Ω–¥–∏—Ä—ã.",
        ephemeral: true,
      });
    }

    if (targetHighestRole.index <= authorHighestRole.index) {
      return message.reply(
        "ü™ñ–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–∞–∫–∞—è –∂–µ –∏–ª–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Ä–æ–ª—å."
      );
    }

    const currentRoleIndex = targetHighestRole.index;
    const newRoleIndex = currentRoleIndex - 1;
    const newRoleId = roleHierarchy[newRoleIndex];

    if (!newRoleId) {
      return message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –¥–∞–ª—å—à–µ.");
    }

    const newRole = guild.roles.cache.get(newRoleId);
    if (!newRole) {
      return message.reply("–†–æ–ª—å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
    }

    await targetMember.roles.add(newRoleId);
    await targetMember.roles.remove(targetHighestRole.roleId);

    if (newRoleId === CONFIG.ROLES.RECRUIT) {
      promotionDates[targetMember.id] = new Date().toISOString();
      savePromotionDates();

      const msg = `# üëã–ò–≥—Ä–æ–∫ <@${targetMember.id}> —Ç–µ–ø–µ—Ä—å –≤ —Ä–µ–∫—Ä—É—Ç–∞—Ö. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n –í —Ç–µ—á–µ–Ω–∏–∏ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å —É –≤–∞—Å –±—É–¥–µ—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —Ä–æ–ª—å —Ä–µ–∫—Ä—É—Ç–∞ –ø–æ—Å–ª–µ —á–µ–≥–æ –∫–æ–º–∞–Ω–¥–∏—Ä—ã —Ä–µ—à–∞—Ç –ø–æ–≤—ã—à–∞—Ç—å –≤–∞—Å –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Ä–µ–∫—Ä—É—Ç–∞. –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞—à–µ–º—É –∫–ª–∞–Ω—É —è –≤–∞–º –Ω–∞–ø–∏—à—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ !—Ä–µ–∫—Ä—É—Ç (–ø—Ä–æ–ø–∏—à–∏ –≤ —á–∞—Ç–µ) —á—Ç–æ-–±—ã —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –°—Ç—Ä–µ–ª–æ–∫ —Å —Ç–µ–≥–æ–º –î–®–ë –≤ –∏–≥—Ä–µ/ –¥—Ä—É–≥–∏–º –≤–µ—Ä–¥–∏–∫—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏—è. \n\n –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, —à—Ç—É—Ä–º—É–π—Ç–µ –∏ –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞. ‚òùüèº–ó–∞ –∫–∞–∂–¥—ã–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º —Å–ª–µ–¥—É–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–µ!\n –í—ã –£–ñ–ï –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–ø–∏—Å–∫—É [DSHBr] –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤ "–ø—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏"\n\n –†–µ–∫—Ä—É—Ç–æ–º –º–æ–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 2 –Ω–µ–¥–µ–ª–∏, –¥–∞–ª–µ–µ - –ª–∏–±–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ –°—Ç—Ä–µ–ª–∫–∞, –ª–∏–±–æ: –ø–æ–Ω–∏–∂–µ–Ω–∏–µ –¥–æ –ì–æ—Å—Ç—è/–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞(–ø—Ä–∏ –≥—Ä—É–±—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö). \n\n –ü–æ –∫–∞–∫–æ–º—É –ø—É—Ç–∏ –ø–æ–π–¥–µ—Ç–µ —Ä–µ—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–º! –ö–æ–º–∞–Ω–¥–∏—Ä—ã –æ—Ü–µ–Ω—è—Ç –≤–∞—à—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ –±—É–¥–µ—Ç –≤—ã–Ω–µ—Å–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ. \n\n –í —Å–ª—É—á–∞–µ –ø–æ–ª—É—á–µ–Ω–∏—è 3-—Ö –∑–∞–º–µ—á–∞–Ω–∏–π –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "–æ—Ç–ª–µ—Ç–∞–µ—Ç–µ" –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø–µ—Ä–∏–æ–¥ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏.\n\n –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ:\n -–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞ –Ω–∏–∫ –≤ Steam.\n -–í—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –í–ù–ò–ö–õ–ò –≤ –∫–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª–æ –î–®–ë.\n -–í—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É.\n\n –£–¥–∞—á–∏ –≤ –±–æ—é!`;

      await sendMessageToChannel(
        "1320713497075781703",
        `<@${targetMember.id}> —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏! –ò–¥—ë–º –≤ –±–æ–π!`
      );
      await targetMember.send(msg);
      await sendMessageToChannel(
        CONFIG.CHANNELS.BOT_CONTROL_LOG,
        `<@${message.author.id}> –ø–æ–≤—ã—Å–∏–ª <@${targetMember.id}> –¥–æ —Ä–æ–ª–∏ ${newRole.name}`
      );
    } else {
      await sendMessageToChannel(
        CONFIG.CHANNELS.BOT_CONTROL_LOG,
        `<@${message.author.id}> –ø–æ–≤—ã—Å–∏–ª <@${targetMember.id}> –¥–æ —Ä–æ–ª–∏ ${newRole.name}`
      );
      await sendMessageToChannel(
        "1320713497075781703",
        `# :saluting_face: <@${targetMember.id}> –ø–æ–≤—ã—à–µ–Ω –¥–æ —Ä–æ–ª–∏ ${newRole.name}`
      );
    }

    return message.reply(`–£—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω –¥–æ —Ä–æ–ª–∏ ${newRole.name}`);
  } catch (error) {
    console.error("Error in promotion handler:", error);
    throw error;
  }
}

async function handleDemotion(
  message,
  targetMember,
  authorHighestRole,
  targetHighestRole,
  guild
) {
  try {
    if (!hasRequiredRole(message.member || message)) {
      return message.reply({
        content:
          "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤. –≠—Ç–æ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –ö–ú–î –∏ –∫–æ–º–∞–Ω–¥–∏—Ä—ã.",
        ephemeral: true,
      });
    }

    if (authorHighestRole.index >= targetHighestRole.index) {
      return message.reply(
        "üõë –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞–≤–Ω–æ–π –∏–ª–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é."
      );
    }

    if (targetHighestRole.roleId === CONFIG.ROLES.RECRUIT) {
      const promptMsg = await message.reply(
        "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–Ω–∏–∑–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –¥–æ —É—Ä–æ–≤–Ω—è '–ì–æ—Å—Ç—å'. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø—Ü–∏–π:\n" +
          "1. –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Å—Ç–µ–º\n" +
          "2. –ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞\n" +
          "–û—Ç–≤–µ—Ç—å—Ç–µ 1 –∏–ª–∏ 2 –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥, –∏–Ω–∞—á–µ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞."
      );

      const filter = (response) =>
        response.author.id === message.author.id &&
        ["1", "2"].includes(response.content);

      try {
        const collected = await message.channel.awaitMessages({
          filter,
          max: 1,
          time: 30000,
          errors: ["time"],
        });

        const response = collected.first().content;

        if (response === "1") {
          await targetMember.roles.set([CONFIG.ROLES.GUEST]);
          await sendMessageToChannel(
            CONFIG.CHANNELS.BOT_CONTROL_LOG,
            `<@${message.author.id}> –ø–æ–Ω–∏–∑–∏–ª <@${targetMember.id}> –¥–æ –≥–æ—Å—Ç—è.`
          );
          return message.reply("–ò–≥—Ä–æ–∫ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –≥–æ—Å—Ç—è.");
        } else if (response === "2") {
          try {
            await targetMember.send("–í–∞—Å –∏—Å–∫–ª—é—á–∏–ª–∏ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞.");
          } catch (error) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°:", error);
          }
          await targetMember.kick("–û—Ç–∫—Ä—ã–≤–∞—é –¥–≤–µ—Ä–∏...");
          await sendMessageToChannel(
            "1320713497075781703",
            `# :no_entry: <@${targetMember.id}> –±–æ–ª—å—à–µ –Ω–µ —Å –Ω–∞–º–∏.`
          );
          return message.reply("–ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞.");
        }
      } catch (error) {
        return message.reply("‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      }
    }

    const currentRoleIndex = targetHighestRole.index;
    const newRoleIndex = currentRoleIndex + 1;
    const newRoleId = roleHierarchy[newRoleIndex];

    if (!newRoleId) {
      return message.reply("üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–Ω–∏–∑–∏—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏.");
    }

    const newRole = guild.roles.cache.get(newRoleId);
    if (!newRole) {
      return message.reply("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è.");
    }

    await targetMember.roles.add(newRoleId);
    await targetMember.roles.remove(targetHighestRole.roleId);

    await sendMessageToChannel(
      CONFIG.CHANNELS.BOT_CONTROL_LOG,
      `<@${message.author.id}> –ø–æ–Ω–∏–∑–∏–ª <@${targetMember.id}> –¥–æ —Ä–æ–ª–∏ ${newRole.name}.`
    );
    await sendMessageToChannel(
      "1320713497075781703",
      `# :arrow_down: <@${targetMember.id}> –ø–æ–Ω–∏–∂–µ–Ω –¥–æ —Ä–æ–ª–∏ ${newRole.name}.`
    );

    return message.reply(`–ò–≥—Ä–æ–∫ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ —Ä–æ–ª–∏ ${newRole.name}.`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–Ω–∏–∂–µ–Ω–∏—è:", error);
    return message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞.");
  }
}
client.once(Events.ClientReady, () => {
  console.log("–ë–æ—Ç –î–®–ë –∑–∞–ø—É—â–µ–Ω –≤ –æ–Ω–ª–∞–π–Ω! –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
  updateBotStatus();
  setInterval(updateBotStatus, 60 * 1000);
});

client.on(Events.GuildMemberAdd, async (member) => {
  try {
    await member.guild.roles.fetch();
    await member.guild.channels.fetch();

    const guestRole = member.guild.roles.cache.get(CONFIG.ROLES.GUEST);
    if (!guestRole) {
      throw new Error("Guest role not found");
    }

    await member.roles.add(guestRole);
    const logChannel = member.guild.channels.cache.get(
      CONFIG.CHANNELS.BOT_CONTROL_LOG
    );

    if (logChannel) {
      await logChannel.send(
        `‚úÖ –†–æ–ª—å "–≥–æ—Å—Ç—å" –≤—ã–¥–∞–Ω–∞ –Ω–æ–≤–æ–ø—Ä–∏–±—ã–≤—à–µ–º—É: <@${member.user.id}>`
      );
    }
  } catch (error) {
    console.error("Error assigning guest role:", error);
    const logChannel = member.guild.channels.cache.get(
      CONFIG.CHANNELS.BOT_CONTROL_LOG
    );
    if (logChannel) {
      await logChannel.send(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫—É: ${member.user.tag}\nError: ${error.message}. –ü–æ–∂–∞–ª—É–π—Ç–µ—Å—å Billie Joe`
      );
    }
  }
});

client.on(Events.MessageCreate, async (message) => {
  if (message.author.bot) return;

  if (message.content.startsWith(PREFIX + "—Ä–µ–∫—Ä—É—Ç")) {
    try {
      const member = message.member;
      if (!member) {
        return message.reply("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.");
      }

      if (!member.roles.cache.has(CONFIG.ROLES.RECRUIT)) {
        return message.reply({
          content:
            "‚õî–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å —Ä–æ–ª—å—é '–†–µ–∫—Ä—É—Ç'.",
          ephemeral: true,
        });
      }

      const promotionDate = getPromotionDate(member);
      if (!promotionDate) {
        return message.reply(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É —Ç–≤–æ–µ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        );
      }

      const currentDate = new Date();
      const timeLeft = new Date(promotionDate);
      timeLeft.setDate(timeLeft.getDate() + 14);
      const daysLeft = Math.floor(
        (timeLeft - currentDate) / (1000 * 60 * 60 * 24)
      );

      if (daysLeft > 0) {
        return message.reply(
          `‚è±Ô∏è–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ —Ä–æ–ª–∏ '–°—Ç—Ä–µ–ª–æ–∫' –∏ –ø—Ä–∏–Ω—è—Ç–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤. –ü–æ–∫–∞–∂–∏ —Å–µ–±—è!`
        );
      } else {
        await sendMessageToChannel(
          CONFIG.CHANNELS.BOT_CONTROL_LOG,
          `üìÖ –°—Ä–æ–∫ —Ä–µ–∫—Ä—É—Ç—Å—Ç–≤–∞ –∏—Å—Ç–µ–∫ –¥–ª—è <@${member.id}>`
        );
        return message.reply(
          "üìÖ2 –Ω–µ–¥–µ–ª–∏ –∏—Å—Ç–µ–∫–ª–æ. –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–∏–º –∫–æ–º–∞–Ω–¥–∏—Ä–∞–º. –û–∂–∏–¥–∞–π —Ä–µ—à–µ–Ω–∏—è."
        );
      }
    } catch (error) {
      console.error("Error handling recruit command:", error);
      return message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.");
    }
  }

  if (message.content.startsWith(PREFIX)) {
    const args = message.content.slice(PREFIX.length).trim().split(" ");
    const displayNameToSearch = args[0];
    const command = args[1]?.toLowerCase();
    let stats = message.content.toLowerCase().startsWith(PREFIX + "stats");

    if (!stats) {
      try {
        const guild = message.guild;
        if (!guild)
          return message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ä–≤–µ—Ä–µ.");

        await guild.members.fetch();
        const targetMember = guild.members.cache.find((m) =>
          m.displayName
            .toLowerCase()
            .includes(displayNameToSearch.toLowerCase())
        );

        if (!targetMember) {
          return message.reply("–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        const authorHighestRole = getHighestRole(message.member);
        const targetHighestRole = getHighestRole(targetMember);

        if (!authorHighestRole.roleId || !targetHighestRole.roleId) {
          return message.reply(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏. –ó–æ–≤–∏—Ç–µ Billie Joe."
          );
        }

        if (command === "–ø–æ–Ω–∏–∑–∏—Ç—å") {
          await handleDemotion(
            message,
            targetMember,
            authorHighestRole,
            targetHighestRole,
            guild
          );
        } else if (command === "–ø–æ–≤—ã—Å–∏—Ç—å") {
          await handlePromotion(
            message,
            targetMember,
            authorHighestRole,
            targetHighestRole,
            guild
          );
        }
      } catch (error) {
        console.error("Error handling command:", error);
        await message.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ñ–∞–ª—É–π—Ç–µ—Å—å Billie Joe"
        );
      }
    }
  }

  if (message.content.startsWith("*–æ–±—ä—è–≤–ª–µ–Ω–∏–µ")) {
    const member = message.member;
    if (!member) return;

    const hasAdminRole = member.roles.cache.some((role) =>
      CONFIG.ADMIN_ROLES.includes(role.id)
    );

    if (!hasAdminRole) {
      return message.reply({
        content: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        ephemeral: true,
      });
    }

    const announcementContent = message.content
      .slice("*–æ–±—ä—è–≤–ª–µ–Ω–∏–µ".length)
      .trim();

    if (!announcementContent) {
      return message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.");
    }

    try {
      await sendMessageToChannel(
        CONFIG.CHANNELS.ANNOUNCEMENTS,
        announcementContent
      );
      await message.reply("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", error);
      return message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.");
    }
  }
});

client.on(Events.InteractionCreate, async (interaction) => {
  if (!interaction.isUserContextMenuCommand()) return;

  const invokingUser = interaction.user;
  const targetUser = interaction.targetUser;
  const guild = interaction.guild;

  if (!guild) {
    return interaction.reply({
      content: "–ö–æ–º–∞–Ω–¥–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
      ephemeral: true,
    });
  }

  const invokingMember = await guild.members.fetch(invokingUser.id);
  const targetMember = await guild.members.fetch(targetUser.id);

  if (!invokingMember || !targetMember) {
    return interaction.reply({
      content: "–ù–µ –º–æ–≥—É –¥–æ—Å—Ç–∞—Ç—å –∏–Ω—Ñ—É –æ–± –∏–≥—Ä–æ–∫–µ",
      ephemeral: true,
    });
  }

  if (!hasRequiredRole(invokingMember)) {
    return interaction.reply({
      content:
        "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤. –≠—Ç–æ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –ö–ú–î –∏ –∫–æ–º–∞–Ω–¥–∏—Ä—ã.",
      ephemeral: true,
    });
  }

  const context = {
    author: invokingUser,
    member: invokingMember,
    channel: interaction.channel,
    reply: (content) =>
      interaction.reply(
        typeof content === "string"
          ? { content, ephemeral: true }
          : { ...content, ephemeral: true }
      ),
    user: invokingUser,
  };

  if (interaction.commandName === "üöÄ–ü–æ–≤—ã—Å–∏—Ç—å") {
    try {
      await handlePromotion(
        context,
        targetMember,
        getHighestRole(invokingMember),
        getHighestRole(targetMember),
        guild
      );
    } catch (error) {
      console.error("Error during promotion:", error);
      await interaction.reply({
        content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤.",
        ephemeral: true,
      });
    }
  } else if (interaction.commandName === "–ü–æ–Ω–∏–∑–∏—Ç—å") {
    try {
      await handleDemotion(
        context,
        targetMember,
        getHighestRole(invokingMember),
        getHighestRole(targetMember),
        guild
      );
    } catch (error) {
      console.error("Error during demotion:", error);
      await interaction.reply({
        content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤.",
        ephemeral: true,
      });
    }
  } else if (interaction.commandName === "–ó–∞–±–∞–Ω–∏—Ç—å") {
    if (hasRequiredRole(invokingMember)) {
      try {
        if (
          getHighestRole(targetMember).index <=
          getHighestRole(invokingMember).index
        ) {
          return interaction.reply({
            content:
              "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£ –Ω–µ–≥–æ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π —Ä–∞–Ω–≥.",
            ephemeral: true,
          });
        }

        await targetMember.ban({ reason: "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª" });

        await interaction.reply({
          content: `<@${targetMember.id}> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.`,
          ephemeral: true,
        });
        await sendMessageToChannel(
          CONFIG.CHANNELS.BOT_CONTROL_LOG,
          `<@${invokingUser.id}> –∑–∞–±–∞–Ω–∏–ª –∏–≥—Ä–æ–∫–∞ <@${targetMember.id}>`
        );
        await sendMessageToChannel(
          "1320713497075781703",
          `# :x: –ò–≥—Ä–æ–∫ <@${targetMember.id}> –≤—ã–≥–Ω–∞–Ω –∏–∑ –î–®–ë –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.`
        );
      } catch (error) {
        console.error("Error banning member:", error);
        await interaction.reply({
          content: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
          ephemeral: true,
        });
      }
    } else {
      await interaction.reply({
        content: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤.",
        ephemeral: true,
      });
      await sendMessageToChannel(
        CONFIG.CHANNELS.BOT_CONTROL_LOG,
        `<@${invokingUser.id}> –ø—ã—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–∏—Ç—å <@${targetMember.id}>`
      );
    }
  }
});

// Stats functionality
let playerData = JSON.parse(fs.readFileSync("players.json", "utf8"));

function savePlayerData() {
  fs.writeFileSync("players.json", JSON.stringify(playerData, null, 2), "utf8");
}

client.on("messageCreate", async (message) => {
  if (message.content.toLowerCase().startsWith("!stats")) {
    const discordId = message.author.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    let steamId = playerData[discordId];
    if (!steamId) {
      // —Å–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ—Ç
      message.reply(
        "–í–∞—à SteamID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π SteamID, —á—Ç–æ–± —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª"
      );

      // –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–º —Å —Å–æ–æ–±—â–µ–Ω–∏—è
      const filter = (response) => response.author.id === discordId;
      const collector = message.channel.createMessageCollector({
        filter,
        time: 30000,
        max: 1,
      });

      collector.on("collect", (msg) => {
        steamId = msg.content.trim();
        if (!/^\d{17}$/.test(steamId)) {
          // —Å—Ç–∏–º 17 —Ü–∏—Ñ—Ä
          return message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π SteamID. –û–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 17 —Ü–∏—Ñ—Ä.");
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        playerData[discordId] = steamId;
        savePlayerData();

        message.reply(
          "–í–∞—à SteamID —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!stats` —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        );
      });

      collector.on("end", (collected) => {
        if (collected.size === 0) {
          message.reply(
            "–í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ SteamID –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
          );
        }
      });

      return;
    }

    // –∞–¥—Ä–µ—Å –∑–∞–ø—Ä–æ—Å–∞
    const apiUrl = `https://sqstat.ru/api/player/stats.php?steam_id=${steamId}&full=true`;

    try {
      // –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–ø—Ä–æ—Å–∞
      const response = await axios.get(apiUrl);
      const data = response.data;

      // –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã
      const onlineTime = data.stats[0].value || "N/A";
      const favKit = data.stats[2].value || "N/A";
      const matchQty = data.stats[3].value || "N/A";
      const winrate = data.stats[4].value || "N/A";
      const kd = data.stats[5].value || "N/A";
      const kills = data.stats[6].value || "N/A";
      const deaths = data.stats[7].value || "N/A";
      const revive = data.stats[8].value || "N/A";
      const weapon = data.weapons.weapon || "N/A";

      const embed = new EmbedBuilder()
        .setColor(0x2b2d31)
        .setTitle(" üìä–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        .addFields(
          {
            name: "–°–∫–∏–ª–ª",
            value: `
        **K/D**: ${kd}
        **–í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω**: ${onlineTime}
        **–£–±–∏–π—Å—Ç–≤–∞**: ${kills}
        **–°–º–µ—Ä—Ç–∏**: ${deaths}
        **–ü–æ–¥–Ω—è—Ç–∏–π**: ${revive}
        **–õ—é–±–∏–º—ã–π –∫–∏—Ç**: ${favKit}
        **–ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ**: ${matchQty}
        **–í–∏–Ω—Ä–µ–π—Ç**: ${winrate}
      `,
            inline: true,
          },
          {
            name: "–û—Ä—É–∂–∏–µ",
            value: `${Object.keys(data.weapons.weapon)[0]}\n${
              Object.keys(data.weapons.weapon)[1]
            }\n${Object.keys(data.weapons.weapon)[2]}\n${
              Object.keys(data.weapons.weapon)[3]
            }\n${Object.keys(data.weapons.weapon)[4]}\n${
              Object.keys(data.weapons.weapon)[5]
            }\n${Object.keys(data.weapons.weapon)[6]}`,
            inline: true,
          },
          {
            name: "–£–±–∏–π—Å—Ç–≤–∞",
            value: `${weapon[Object.keys(data.weapons.weapon)[0]].cnt}\n${
              weapon[Object.keys(data.weapons.weapon)[1]].cnt
            }\n${weapon[Object.keys(data.weapons.weapon)[2]].cnt}\n${
              weapon[Object.keys(data.weapons.weapon)[3]].cnt
            }\n${weapon[Object.keys(data.weapons.weapon)[4]].cnt}\n${
              weapon[Object.keys(data.weapons.weapon)[5]].cnt
            }\n${weapon[Object.keys(data.weapons.weapon)[6]].cnt}\n`,
            inline: true,
          }
        )
        .setFooter({ text: "–∏—Å—Ç–æ—á–Ω–∏–∫: –†—É—Å—Å–∫–æ–µ –°–æ–æ–±—â–µ—Å—Ç–≤–æ" });

      // –û–¢–≤–µ—Ç

      message.reply({ embeds: [embed] });
    } catch (error) {
      console.error("Error fetching stats:", error);

      // –æ—à–∏–±–∫–∞
      message.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à SteamID –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ."
      );

      // –ù–æ–≤—ã–π —Å—Ç–∏–º
      const filter = (response) => response.author.id === discordId;
      const collector = message.channel.createMessageCollector({
        filter,
        time: 30000,
        max: 1,
      });

      collector.on("collect", (msg) => {
        steamId = msg.content.trim();
        if (!/^\d{17}$/.test(steamId)) {
          return message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π SteamID. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID."
          );
        }

        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        playerData[discordId] = steamId;
        savePlayerData();

        message.reply(
          "–í–∞—à SteamID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!stats` —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        );
      });

      collector.on("end", (collected) => {
        if (collected.size === 0) {
          message.reply(
            "–í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ SteamID –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
          );
        }
      });
    }
  }
});

client.login(token);
